package org.magenta.core.automagic.generation;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Arrays;
import java.util.Collections;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.magenta.DataKey;
import org.magenta.NewFixtureFactory;
import org.magenta.core.GenerationStrategy;
import org.magenta.core.automagic.generation.provider.ConditionalGeneratorFactory;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import com.google.common.base.Optional;
import com.google.common.base.Suppliers;

@RunWith(MockitoJUnitRunner.class)
public class CompositeGeneratorFactoryTest {

  @Mock
  private NewFixtureFactory fixture;


  @Test
  public void anInstanceWithoutAnyDynamicGeneratorFactoryShouldNotProduceAnyGenerationStrategy(){

    //setup fixture
    CompositeGeneratorFactory sut = new CompositeGeneratorFactory(Collections.emptyList());

    //exercise sut
    Optional<? extends GenerationStrategy<Object>> actual = sut.buildGeneratorOf(DataKey.of(Object.class), fixture, sut);

    //verify outcome
    assertThat(actual.isPresent()).as("the presence of a generation strategy").isFalse();

  }

  @Test
  public void anInstanceWithAMatchingDynamicGeneratorFactoryShouldProduceGenerationStrategy(){

    //setup fixture
    DynamicGeneratorFactory unmatchingCandidate = new ConditionalGeneratorFactory(type -> false, Suppliers.ofInstance("unexpected"));
    DynamicGeneratorFactory matchingCandidate = new ConditionalGeneratorFactory(type -> true, Suppliers.ofInstance("expected"));

    CompositeGeneratorFactory sut = new CompositeGeneratorFactory(Arrays.asList(unmatchingCandidate, matchingCandidate));

    //exercise sut
    Optional<? extends GenerationStrategy<Object>> actual = sut.buildGeneratorOf(DataKey.of(Object.class), fixture, sut);

    //verify outcome
    assertThat(actual.isPresent()).as("the presence of a generation strategy").isTrue();
    assertThat(actual.get().generate(fixture)).as("the value generated by the generation strategy").isEqualTo("expected");

  }
}
