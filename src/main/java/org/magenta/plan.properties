1) creer un simple supplier qui se fait injecter des dataset iterators
2) donner la possibilite d'avoir une composition par distribution : composedOf(dis(Color.RED, .25),dis(Color.BLUE,.75))

3) restrictTo et atLeatContains(Tag.AIRPORT) 

4) fournir un seed a la fixture
5) faire de la restriction dynamique : restreindre sur les strings du dataset de "Car"

6) l'iteration est unique pour chaque appelant : demander un dataset equivaut a creer un nouveau dataset avec son propre iterateur decorant le dataset commun.  Le datasupplier ne contient donc
pas la logique d'iteration mais a un lien direct sur la source de donnee.

7) Il serait bien que lors de la generation d'une liste de donnee etant composee entre autre d'une source de donnee qui pourrait etre filtre.  L'iterateur
accepterait dans ce cas precis, que plusieurs next soit fait sur la meme source...

8) Il doit etre possible de filtrer par reflexion, lire une liste de donnee static d'une source exterieur.


9) ameliorer les tests du SequenceFieldHandler, rendre ca plus "unit"



IterationStrategy
DataSet
ListDataSupplier or GeneratedDataSupplier



///stack
Lister les dataset existants quand un dataset n'est pas trouve

tester cachedsequence

Injecter Sequence sur un TypeToken comme un Bag<Integer>, le generateur ferait plusieurs bags

Injecter une sequence avec un DataKey qualifie

Food -> tags : les memes tags sont reutilise d'un Food a l'autre.

Penser a la generation de LocalizationProject et LocalizationRequest avec magenta 2

Generer des string base sur une regex

utiliser une chaine de responsabilite dans le ReflexionBasedGeneratorFactory

Une classe Hieararchy<G> comme value object a genere par un generateur.  Le "G" etant le type de node.


Utiliser une fonction fixture to X au lieu d'utiliser un FixtureContext quand c'est possible


