1) creer un simple supplier qui se fait injecter des dataset iterators
2) donner la possibilite d'avoir une composition par distribution : composedOf(dis(Color.RED, .25),dis(Color.BLUE,.75))

3) restrictTo et atLeatContains(Tag.AIRPORT) 

4) fournir un seed a la fixture
5) faire de la restriction dynamique : restreindre sur les strings du dataset de "Car", s'inspirer du css

6) l'iteration est unique pour chaque appelant : demander un dataset equivaut a creer un nouveau dataset avec son propre iterateur decorant le dataset commun.  Le datasupplier ne contient donc
pas la logique d'iteration mais a un lien direct sur la source de donnee.

7) Il serait bien que lors de la generation d'une liste de donnee etant composee entre autre d'une source de donnee qui pourrait etre filtre.  L'iterateur
accepterait dans ce cas precis, que plusieurs next soit fait sur la meme source...

8) Il doit etre possible de filtrer par reflexion, lire une liste de donnee static d'une source exterieur.


9) ameliorer les tests du SequenceFieldHandler, rendre ca plus "unit"

10) creer des dataset base sur des cles dynamiques, au lieu de referer simplement a un type, la cle est une regle de selection, un peu comme dans un css : ".zipCode" -> tous les zip codes



IterationStrategy
DataSet
ListDataSupplier or GeneratedDataSupplier



///stack
Lister les dataset existants quand un dataset n'est pas trouve

tester cachedsequence

Injecter Sequence sur un TypeToken comme un Bag<Integer>, le generateur ferait plusieurs bags

Injecter une sequence avec un DataKey qualifie

Food -> tags : les memes tags sont reutilise d'un Food a l'autre.

Penser a la generation de LocalizationProject et LocalizationRequest avec magenta 2

Generer des string base sur une regex

utiliser une chaine de responsabilite dans le ReflexionBasedGeneratorFactory

Une classe Hieararchy<G> comme value object a genere par un generateur.  Le "G" etant le type de node.


Utiliser une fonction fixture to X au lieu d'utiliser un FixtureContext quand c'est possible

ObjectGenerator : extraire la fonction hydrate dans une nouvelle interface, de cette derniere, on en sortirait deux implementations : une pour les sequences et l'autre pour les datasets. (et ainsi on pourrait generer des liste de X)

Ajouter des filtres et des transform lors de la creation d'un dataset, de cette facon on evite de generer un dataset contenant reeleement 10000 elements juste pour etre capable d'en generer 3. par example : dataset(Feature.class).filter(f -> f.getName().startWith("a")).list(10);

ObjectGeneratorFatory: Cette classes est mal divise.  Pourquoi cette derniere cree un sequence map quand celui-ci est necessaire pour le SequenceFieldHydrater seulement? et comment un hydrater peut-il
savoir quel field il doit "hydrater"?  Probablement que la liste des fields a hydrater peut etre creer avant l'hydratation.

On genere par defaut 5 elements lorsqu'on utilise la foonction automagic, c'est si peu configurable...


//TODO 1: handle this

//simplier les cas de transformation sur fonction Identite, mieux gerer les nulls type sur les datasupplier dans le fixture factory

  @InjectUniqueSequence, pratique lorsque l'on veut eviter des duplicats lorsqu'il y a des contraintes d'unicite sur certain champs.  Permettrait de limiter la taille d'un generateur.

  
  Magenta permet de generer des graphes d'objets a partir de restriction "flat"
  
  Passer un supplier d'instance au automaticGenerator pour parer au probleme des classes sans constructeur
  
  Ajouter des tests pour valider les groupes de sequence coordinator dans ObjectSequenceMapBuilder
  
  Permettre de cloner un fixture factory pour ne garder qu'un prototype sans items mais avec tous les memes definitions dans le but d'accelerer la creation de ce dernier lorsqu'il est reutilise
  
  //TODO The seed is configured twice.. that is strange
  
  reflechir au concept des QualifiedDataSet et aufait qu'il n'est pas possible de restreindre avec ces derniers